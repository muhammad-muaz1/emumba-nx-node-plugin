import express, { Application, Request, Response } from 'express';
import * as fs from 'fs';
import redis from './redis';
import * as path from 'path';
import mongoose from 'mongoose';
const cors = require('cors');
const dotenv = require('dotenv');

<% if (userAuth === 'session-based') { %>
import session from 'express-session';
<% } %>

dotenv.config();

const app: Application = express();

<% if (userAuth === 'session-based') { %>
declare module 'express-session' {
  interface SessionData {
    user: {
      _id: string;
      name: string;
      email: string;
    };
  }
}
<% } %>

// Middleware
app.use(cors());
app.use(express.json());

<% if (userAuth === 'session-based') { %>
app.use(session({
  secret: process.env.SESSION_SECRET as string,
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}));
<% } %>

app.get('/health', async (req: Request, res: Response) => {
  try {
    // Check MongoDB connection
    const mongoStatus = mongoose.connection.readyState === 1 ? 'connected' : 'disconnected';

    // Check Redis connection
    const redisStatus = await new Promise((resolve) => {
      redis.ping((err, result) => {
        if (err || result !== 'PONG') {
          resolve('disconnected');
        } else {
          resolve('connected');
        }
      });
    });

    // Return health status
    res.status(200).json({
      status: 'ok',
      services: {
        mongoDB: mongoStatus,
        redis: redisStatus,
      },
    });
  } catch (err) {
    res.status(500).json({ status: 'error', message: 'Health check failed', error: err });
  }
});

<% if (architecture === 'monolithic') { %>
  // Function to dynamically load routes
  const loadRoutes = (app: Application) => {
    const routesPath = path.join(__dirname, 'src/routes');
    fs.readdirSync(routesPath).forEach((file) => {
      if (file.endsWith('.routes.ts')) {
        const route = require(path.join(routesPath, file));
        app.use('/api', route.default); // Set prefix for routes
      }
    });
  };
<% } else { %>
  const loadRoutes = (app: Application) => {
    const modulesPath = path.join(__dirname, 'apps/modules');

    const loadRoutesFromDirectory = (directory: string) => {
      fs.readdirSync(directory).forEach((fileOrFolder) => {
        const fullPath = path.join(directory, fileOrFolder);
        const stat = fs.statSync(fullPath);

        if (stat.isDirectory()) {
          loadRoutesFromDirectory(fullPath);
        } else if (fileOrFolder.endsWith('.routes.ts')) {
          console.log(`Loading route file: ${fullPath}`);
          try {
            const route = require(fullPath).default || require(fullPath);
            app.use('/api', route); // Set prefix for routes
          } catch (error) {
            console.error(`Failed to load route file: ${fullPath}`, error);
          }
        }
      });
    };

    loadRoutesFromDirectory(modulesPath);
  };
<% } %>

// Load routes
loadRoutes(app);

export default app;
