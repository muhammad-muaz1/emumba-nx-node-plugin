import bcrypt from 'bcrypt';
import User from './user.model';
import { Request, Response } from 'express';
import { getUserService } from './user.service';
<% if (userAuth === 'token-based') { %>
import jwt from 'jsonwebtoken';
<% } %>

export const getUser = async (req: Request, res: Response) => {
  try {
    const users = await getUserService();
    res.json(users);
  } catch (error) {
    res.status(500).send(error);
  }
};

export const register = async (req: Request, res: Response) => {
  try {
    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ name, email, password: hashedPassword });
    await user.save();
    res.status(201).send('User registered successfully');
  } catch (error) {
    res.status(500).send(error);
  }
};

export const login = async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(400).send('Invalid email or password');
    }

    <% if (userAuth === 'token-based') { %>
    const token = jwt.sign(
      { _id: user._id, name: user.name, email: user.email },
      process.env.JWT_SECRET as string,
      { expiresIn: '1h' }
    );
    res.send({ token });
    <% } else { %>
    req.session.user = {
      _id: user._id.toString(),
      name: user.name,
      email: user.email,
    };
    res.send('Logged in successfully');
    <% } %>
  } catch (error) {
    res.status(500).send(error);
  }
};
