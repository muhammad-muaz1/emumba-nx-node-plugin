import User from './user.model';
import bcrypt from 'bcrypt';
<% if (userAuth === 'token-based') { %>
import jwt from 'jsonwebtoken';
<% } %>

export const getUserService = async () => {
  return await User.find();
};

export const registerUserService = async (name: string, email: string, password: string) => {
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ name, email, password: hashedPassword });
  await user.save();
  return user;
};

<% if (userAuth !== 'none') { %>

export const loginUserService = async (email: string, password: string) => {
  const user = await User.findOne({ email });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    throw new Error('Invalid email or password');
  }
  
  return user;
};

<% } %>
<% if (userAuth === 'token-based') { %>

export const generateToken = (user: any) => {
  return jwt.sign(
    { _id: user._id, name: user.name, email: user.email },
    process.env.JWT_SECRET as string,
    { expiresIn: '1h' }
  );
};

<% } %>